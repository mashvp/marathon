{"version":3,"sources":["types.js","utils.js","runners/combined-runner.js","runners/base-runner.js","runners/scoped-runner.js","index.js"],"names":["RUNNER","COMBINED_RUNNER","SCOPED_RUNNER","AUTO_COMBINED_RUNNER","ROOT_RUNNER","WORKER_RUNNER","ERROR_RUNNER","marathonObject","type","obj","__marathon","isMarathonObject","isMarathonType","isNullOrUndefined","value","undefined","isString","constructor","name","toLowerCase","combineRunners","runners","globals","instances","register","forEach","runner","instance","Error","err","push","unregister","splice","length","createRunner","implementation","events","unbindAll","Object","entries","event","target","callback","removeEventListener","runnerInstance","bind","addEventListener","console","error","JSON","stringify","unbind","filter","e","createScopedRunner","scope","elements","document","querySelectorAll","map","element","index","RootRunnerState","UNREGISTERED","REGISTERED","combineRoot","combinedRunner","state","registerCurrentInstance","keepTree"],"mappings":"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","file":"marathon.min.js","sourceRoot":"../src","sourcesContent":["export const RUNNER = 'RUNNER';\nexport const COMBINED_RUNNER = 'COMBINED_RUNNER';\nexport const SCOPED_RUNNER = 'SCOPED_RUNNER';\nexport const AUTO_COMBINED_RUNNER = 'AUTO_COMBINED_RUNNER';\nexport const ROOT_RUNNER = 'ROOT_RUNNER';\nexport const WORKER_RUNNER = 'WORKER_RUNNER';\nexport const ERROR_RUNNER = 'ERROR_RUNNER';\n","/**\n * @kind typedef\n * @memberof module:Marathon\n * @name MarathonObject\n * @typedef {object} MarathonObject\n *\n * @property {string} name - The name of the object\n * @property {function} register - The register function\n * @property {function} unregister - The unregister function\n */\nexport const marathonObject = (type, obj) => ({ __marathon: { type }, ...obj });\n\nexport const isMarathonObject = obj => obj && obj.__marathon;\n\nexport const isMarathonType = (obj, type) =>\n  isMarathonObject(obj) && obj.__marathon.type === type;\n\nexport const isNullOrUndefined = value => value == undefined;\n\nexport const isString = value =>\n  !isNullOrUndefined(value) &&\n  value.constructor.name.toLowerCase() === 'string';\n","import { COMBINED_RUNNER, ROOT_RUNNER } from '../types';\nimport { isMarathonObject, marathonObject, isMarathonType } from '../utils';\n\n/**\n * @typedef {function(*): MarathonObject} RunnerFunction\n *\n * Creates a single runner from multiple runners.\n *\n * @kind function\n * @memberof module:Marathon\n * @instance\n * @name combineRunners\n *\n * @param  {...RunnerFunction} runners\n *\n * @example\n * import { createRunner, combineRunners } from '@mashvp/marathon';\n *\n * const firstRunner = createRunner(...);\n * const secondRunner = createRunner(...);\n *\n * const combinedRunner = combineRunners(firstRunner, secondRunner);\n *\n * @returns {RunnerFunction}\n */\nexport const combineRunners = (...runners) => globals => {\n  const instances = [];\n\n  const register = () => {\n    runners.forEach(runner => {\n      let instance;\n\n      if (isMarathonType(runner, ROOT_RUNNER)) {\n        throw new Error(\n          'Trying to combine a root runner. [ ie. combineRoot(combineRoot()) ]\\n\\tUse #combineRunners to join runners together. Only use #combineRoot for your root application runner.'\n        );\n      }\n\n      try {\n        instance = runner(globals);\n      } catch (err) {\n        throw new Error(`Error while generating runner instance: ${err}`);\n      }\n\n      if (!isMarathonObject(instance)) {\n        throw new Error(\n          'In combineRunners: Runner did not return a valid instance.'\n        );\n      }\n\n      instances.push(instance);\n      instance.register();\n    });\n  };\n\n  const unregister = () => {\n    instances.forEach(instance => {\n      instance.unregister();\n    });\n\n    instances.splice(0, instances.length);\n  };\n\n  return marathonObject(COMBINED_RUNNER, {\n    name: 'CombinedRunner',\n    register,\n    unregister\n  });\n};\n","import { RUNNER } from '../types';\nimport { marathonObject } from '../utils';\n\n/**\n * @typedef {function(*): MarathonObject} RunnerFunction\n *\n * Creates a standard runner.\n *\n * @kind function\n * @memberof module:Marathon\n * @instance\n * @name createRunner\n *\n * @param {string} name - The name of the runner\n * @param {function} implementation - An arrow function containing the implementation of the runner\n *\n * @example\n * import { createRunner } from '@mashvp/marathon';\n *\n * const exampleRunner = createRunner('ExampleRunner', () => {\n *   const register = () => {\n *     console.log('ExampleRunner registered');\n *   };\n *\n *   // Returning an object with a #register function is mandatory.\n *   return { register };\n * });\n *\n * @returns {RunnerFunction}\n */\nexport const createRunner = (name, implementation) => globals => {\n  const events = {};\n\n  const bind = (target, event, callback) => {\n    if (!target.addEventListener) {\n      return console.error(\n        `Marathon: Cannot bind event '${event}': Target ${JSON.stringify(\n          target\n        )} (${typeof target}) does not respond to addEventListener.`\n      );\n    }\n\n    if (!events[event]) {\n      events[event] = [];\n    }\n\n    events[event].push({ target, callback });\n\n    target.addEventListener(event, callback);\n  };\n\n  const unbind = (target, event) => {\n    if (events[event]) {\n      events[event]\n        .filter(e => e.target === target)\n        .forEach(e => e.target.removeEventListener(e.event, e.callback));\n    }\n  };\n\n  const unbindAll = () => {\n    Object.entries(events).forEach(([event, boundEvents]) => {\n      boundEvents.forEach(({ target, callback }) => {\n        target.removeEventListener(event, callback);\n      });\n    });\n  };\n\n  const register = () => {\n    throw new Error(`Marathon: Runner '${name}' does not implement #register.`);\n  };\n\n  const runnerInstance = implementation(globals, { bind, unbind, unbindAll });\n\n  return marathonObject(RUNNER, {\n    name,\n    register,\n    ...runnerInstance,\n    unregister() {\n      if (runnerInstance && runnerInstance.unregister) {\n        runnerInstance.unregister();\n      }\n\n      unbindAll();\n    }\n  });\n};\n","import { SCOPED_RUNNER } from '../types';\nimport { marathonObject, isString } from '../utils';\n\nimport { createRunner } from './base-runner';\n\n/**\n * @typedef {function(*): MarathonObject} RunnerFunction\n *\n * Creates a combined runner of individual runners sharing the same implementation, but scoped to a different element.<br/>\n * This is useful to create component-like runners.\n *\n * @kind function\n * @memberof module:Marathon\n * @instance\n * @name createScopedRunner\n *\n * @param {string} name - The name of the runner\n * @param {string|NodeList|Array.<HTMLElement>} scope - The scope of the runner\n * @param {function} implementation - An arrow function containing the implementation of the runner\n *\n * @example <caption>HTML</caption>\n * <button class=\"alert-button\" data-text=\"This is the alert text\">Click me</button>\n * <button class=\"alert-button\" data-text=\"This is another alert\">No, click me instead!</button>\n *\n * @example <caption>JS</caption>\n * import { createScopedRunner } from '@mashvp/marathon';\n *\n * const alertButton = createScopedRunner('AlertButton', '.alert-button', ({ scope }, { bind }) => {\n *   const register = () => {\n *     const text = scope.getAttribute('data-text');\n *\n *     // Use the `bind` builtin to add event listeners to elements.\n *     // The listeners will be automatically unbound when the runner is unregistered.\n *     bind(scope, 'click', () => {\n *       alert(text);\n *     });\n *   };\n *\n *   return { register };\n * });\n *\n * @returns {RunnerFunction}\n */\nexport const createScopedRunner = (name, scope, implementation) => globals => {\n  const elements = isString(scope)\n    ? [...document.querySelectorAll(scope)]\n    : [...scope];\n\n  const instances = elements.map((element, index) => {\n    const runner = createRunner(\n      `ScopedRunner__${name}--${index + 1}`,\n      implementation\n    );\n\n    return runner({ ...globals, scope: element });\n  });\n\n  const register = () => {\n    instances.forEach(instance => instance.register());\n  };\n\n  const unregister = () => {\n    instances.forEach(instance => instance.unregister());\n  };\n\n  return marathonObject(SCOPED_RUNNER, {\n    name: 'ScopedRunner',\n    register,\n    unregister\n  });\n};\n","/**\n * @module Marathon\n */\n\nimport { ROOT_RUNNER } from './types';\nimport { marathonObject } from './utils';\n\nimport { combineRunners } from './runners/combined-runner';\n\nexport * from './runners/base-runner';\nexport * from './runners/scoped-runner';\nexport * from './runners/combined-runner';\n\nexport const RootRunnerState = {\n  UNREGISTERED: 'UNREGISTERED',\n  REGISTERED: 'REGISTERED'\n};\n\n/**\n * @typedef {function(*): MarathonObject} RunnerFunction\n *\n * Create a root application runner.<br/>\n * Only use this for the root application. If you want to group runners together, see #combineRunners.\n *\n * @kind function\n * @memberof module:Marathon\n * @instance\n * @name combineRoot\n *\n * @see {@link createRunner}\n * @see {@link createScopedRunner}\n * @see {@link combineRunners}\n *\n * @param {...RunnerFunction} runners - Runners created with calls to #createRunner, #createScopedRunner, or #combineRunners.\n *\n * @example\n * import { combineRoot } from '@mashvp/marathon';\n *\n * import someRunner from './some-runner';\n * import someCombinedRunner from './some-combined-runner';\n * import someScopedRunner from './some-scoped-runner';\n *\n * const rootRunner = combineRoot(someRunner, someCombinedRunner, someScopedRunner);\n *\n * document.addEventListener('DOMContentLoaded', () => {\n *   rootRunner.register({ someGlobalValue: 42 });\n * });\n *\n * @returns {MarathonObject}\n */\nexport const combineRoot = (...runners) => {\n  const combinedRunner = combineRunners(...runners);\n\n  let state = RootRunnerState.UNREGISTERED;\n  let instance = null;\n\n  const registerCurrentInstance = () => {\n    try {\n      instance.register();\n    } catch (err) {\n      console.error(\n        `Marathon: Runner '${instance.name}' crashed while registering.\\n\\t${err}`\n      );\n    }\n\n    state = RootRunnerState.REGISTERED;\n  };\n\n  const register = (globals = {}) => {\n    if (state === RootRunnerState.REGISTERED) {\n      throw new Error('Marathon: RootRunner: Already registered.');\n    }\n\n    if (instance) {\n      return registerCurrentInstance();\n    }\n\n    instance = combinedRunner(globals);\n\n    registerCurrentInstance();\n  };\n\n  /**\n   * Unregisters the whole application runner tree.\n   *\n   * @param {boolean} [keepTree=false] - Keeps the runner tree intact. The next call to #register will reuse the previous tree. Note that globals will not be updated.\n   */\n  const unregister = (keepTree = false) => {\n    instance.unregister();\n\n    if (!keepTree) {\n      instance = null;\n    }\n\n    state = RootRunnerState.UNREGISTERED;\n  };\n\n  return marathonObject(ROOT_RUNNER, {\n    name: 'RootRunner',\n    register,\n    unregister\n  });\n};\n"]}